package vn.edu.quanlynhatro.controller;

import vn.edu.quanlynhatro.model.TaiKhoan;
import vn.edu.quanlynhatro.service.TaiKhoanService;
import org.springframework.security.access.prepost.PreAuthorize; // üí° IMPORT QUAN TR·ªåNG
import org.springframework.security.core.Authentication; // C·∫ßn ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/admin/dashboard/users")
public class TaiKhoanController {

    private final TaiKhoanService taiKhoanService;

    public TaiKhoanController(TaiKhoanService taiKhoanService) {
        this.taiKhoanService = taiKhoanService;
    }

    // =================== HI·ªÇN TH·ªä DANH S√ÅCH NG∆Ø·ªúI D√ôNG ===================
    // CH·ªà CHO PH√âP ADMIN HO·∫∂C QU·∫¢N L√ù
    @PreAuthorize("hasAuthority('Admin') or hasAuthority('QuanLy')")
    @GetMapping
    public String listUsers(@RequestParam(required = false) String editUsername,
                            Model model) {

        // Kh√¥ng c·∫ßn ki·ªÉm tra hasAccess(session, ...) n·ªØa

        model.addAttribute("users", taiKhoanService.getAllTaiKhoan());
        model.addAttribute("roles", List.of("Admin", "QuanLy", "SinhVien"));

        if (editUsername != null) {
            TaiKhoan userToEdit = taiKhoanService.timKiemTheoUsername(editUsername);
            model.addAttribute("editUser", userToEdit);
        }

        return "admin/users";
    }

    // =================== TH√äM NG∆Ø·ªúI D√ôNG M·ªöI ===================
    // CH·ªà CHO PH√âP ADMIN HO·∫∂C QU·∫¢N L√ù
    @PreAuthorize("hasAuthority('Admin') or hasAuthority('QuanLy')")
    @PostMapping("/add")
    public String addUser(@RequestParam String username,
                          @RequestParam String password,
                          @RequestParam String role,
                          RedirectAttributes redirectAttrs) {

        // Kh√¥ng c·∫ßn ki·ªÉm tra hasAccess(session, ...) n·ªØa
        
        if (username == null || username.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            redirectAttrs.addFlashAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return "redirect:/admin/dashboard/users";
        }

        if (taiKhoanService.timKiemTheoUsername(username) != null) {
            redirectAttrs.addFlashAttribute("error", "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!");
            return "redirect:/admin/dashboard/users";
        }

        TaiKhoan tkMoi = new TaiKhoan(username.trim(), password.trim(), role);
        boolean result = taiKhoanService.dangKy(tkMoi);

        if (result) {
            redirectAttrs.addFlashAttribute("success", "ƒê√£ th√™m t√†i kho·∫£n m·ªõi!");
        } else {
            redirectAttrs.addFlashAttribute("error", "Kh√¥ng th·ªÉ th√™m t√†i kho·∫£n!");
        }

        return "redirect:/admin/dashboard/users";
    }

    // =================== X√ìA NG∆Ø·ªúI D√ôNG ===================
    // CH·ªà CHO PH√âP ADMIN
    @PreAuthorize("hasAuthority('Admin')")
    @PostMapping("/delete/{username}")
    public String deleteUser(@PathVariable String username,
                             Authentication authentication, // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
                             RedirectAttributes redirectAttrs) {

        // Kh√¥ng c·∫ßn ki·ªÉm tra hasAccess(session, ...) n·ªØa
        
        // D√πng Spring Security ƒë·ªÉ l·∫•y t√™n ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
        String currentUser = authentication.getName(); 
        
        if (currentUser != null && currentUser.equals(username)) {
            redirectAttrs.addFlashAttribute("error", "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p!");
            return "redirect:/admin/dashboard/users";
        }

        taiKhoanService.deleteByUsername(username);
        redirectAttrs.addFlashAttribute("success", "ƒê√£ x√≥a t√†i kho·∫£n!");
        return "redirect:/admin/dashboard/users";
    }

    // =================== C·∫¨P NH·∫¨T NG∆Ø·ªúI D√ôNG ===================
    // CH·ªà CHO PH√âP ADMIN HO·∫∂C QU·∫¢N L√ù
    @PreAuthorize("hasAuthority('Admin') or hasAuthority('QuanLy')")
    @PostMapping("/edit/{username}")
    public String updateUser(@PathVariable String username,
                             @RequestParam(required = false) String password,
                             @RequestParam String role,
                             RedirectAttributes redirectAttrs) {

        // Kh√¥ng c·∫ßn ki·ªÉm tra hasAccess(session, ...) n·ªØa

        TaiKhoan existingUser = taiKhoanService.timKiemTheoUsername(username);
        if (existingUser == null) {
            redirectAttrs.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c·∫ßn s·ª≠a!");
            return "redirect:/admin/dashboard/users";
        }

        boolean result = taiKhoanService.updateUser(username, password, role);

        if (result) {
            redirectAttrs.addFlashAttribute("success", "ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n!");
        } else {
            redirectAttrs.addFlashAttribute("error", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n!");
        }

        return "redirect:/admin/dashboard/users";
    }

    // =================== HI·ªÇN TH·ªä FORM S·ª¨A ===================
    // CH·ªà CHO PH√âP ADMIN HO·∫∂C QU·∫¢N L√ù
    @PreAuthorize("hasAuthority('Admin') or hasAuthority('QuanLy')")
    @GetMapping("/edit")
    public String showEditForm(@RequestParam String username,
                               Model model) {
        
        // D√πng l·∫°i ph∆∞∆°ng th·ª©c listUsers, truy·ªÅn username ƒë·ªÉ hi·ªÉn th·ªã form s·ª≠a
        return listUsers(username, model); 
    }

 }