package vn.edu.quanlynhatro.service;

import vn.edu.quanlynhatro.controller.WriteToFile;
import vn.edu.quanlynhatro.model.Phong;
import vn.edu.quanlynhatro.model.PhongId;
import vn.edu.quanlynhatro.model.SinhVien;
import vn.edu.quanlynhatro.repository.PhongRepository;
import vn.edu.quanlynhatro.repository.SinhVienRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class PhongService {

    @Autowired
    private PhongRepository phongRepository;

    @Autowired
    private WriteToFile writeToFile;

    @Autowired
    private SinhVienRepository sinhVienRepository;

    // üè† L·∫•y t·∫•t c·∫£ ph√≤ng
    public List<Phong> getAllPhong() {
        return phongRepository.findAll();
    }

    // üîç T√¨m ph√≤ng theo (soPhong + toa)
    public Optional<Phong> timKiemTheoSoPhongVaToa(String soPhong, String toa) {
        return phongRepository.findById(new PhongId(soPhong, toa));
    }

    // üîç L·∫•y ph√≤ng theo kh√≥a k√©p
    public Phong layPhongTheoSoPhongVaToa(String soPhong, String toa) {
        return phongRepository.findBySoPhongAndToa(soPhong, toa).orElse(null);
    }

    // üü© L·∫•y ph√≤ng c√≤n tr·ªëng (soNguoiHienTai < soNguoiToiDa)
    public List<Phong> timKiemPhongTrong() {
        return phongRepository.findPhongConCho();
    }

    // üü• L·∫•y ph√≤ng theo tr·∫°ng th√°i
    public List<Phong> getPhongTheoTrangThai(boolean trangThai) {
        return phongRepository.findByTrangThai(trangThai);
    }

    // üè¢ L·∫•y ph√≤ng theo t√≤a
    public List<Phong> getPhongTheoToa(String toa) {
        return phongRepository.findByToa(toa);
    }

    // ‚úÖ Ki·ªÉm tra tr√πng ph√≤ng (soPhong + toa)
    public boolean kiemTraTrungPhong(String soPhong, String toa) {
        return phongRepository.existsBySoPhongAndToa(soPhong, toa);
    }

    // ‚ûï Th√™m ph√≤ng (kh√¥ng n√©m exception)
    public boolean themPhong(Phong phong) {
        if (kiemTraTrungPhong(phong.getSoPhong(), phong.getToa())) {
            return false; // b√°o l√† tr√πng
        }
        phongRepository.save(phong);
        writeToFile.exportPhongData(); // ghi ra file
        return true;
    }

    // ‚úèÔ∏è S·ª≠a ph√≤ng
    public void suaPhong(Phong phong) {
        phongRepository.save(phong);
        writeToFile.exportPhongData();
    }

    // ‚ùå X√≥a ph√≤ng
    public void xoaPhong(String soPhong, String toa) {
        phongRepository.deleteById(new PhongId(soPhong, toa));
        writeToFile.exportPhongData();
    }

    // üîÅ C·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi hi·ªán t·∫°i
    public void capNhatSoNguoiHienTai(String soPhong, String toa, int soNguoiMoi) {
        phongRepository.capNhatSoNguoiHienTai(soPhong, toa, soNguoiMoi);
    }

    // üîÅ C·∫≠p nh·∫≠t ti·ªÅn nh√†
    public void capNhatTienNha(String soPhong, String toa, double tienNha) {
        phongRepository.capNhatTienNha(soPhong, toa, tienNha);
    }

    // üîÅ C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
    public void capNhatTrangThai(String soPhong, String toa, boolean trangThai) {
        phongRepository.capNhatTrangThai(soPhong, toa, trangThai);
    }

    // üìä Th·ªëng k√™
    public long demPhongTheoTrangThai(boolean trangThai) {
        return phongRepository.countByTrangThai(trangThai);
    }

    public long demPhongTheoToa(String toa) {
        return phongRepository.countByToa(toa);
    }
    

    public boolean ganSinhVienVaoPhong(Long sinhVienId, String soPhong, String toa) {
        Phong phong = layPhongTheoSoPhongVaToa(soPhong, toa);
        if (phong == null) return false;

        // Ki·ªÉm tra ph√≤ng ƒë√£ ƒë·∫ßy ch∆∞a
        if (phong.getSoNguoiHienTai() >= phong.getSoNguoiToiDa()) {
            return false; // Ph√≤ng ƒë√£ ƒë·∫ßy
        }

        Optional<SinhVien> sinhVienOpt = sinhVienRepository.findById(sinhVienId);
        if (sinhVienOpt.isEmpty()) return false;

        SinhVien sv = sinhVienOpt.get();
        
        // Ki·ªÉm tra sinh vi√™n ƒë√£ c√≥ ph√≤ng ch∆∞a
        if (sv.getPhong() != null) {
            return false; // Sinh vi√™n ƒë√£ c√≥ ph√≤ng
        }

        sv.setPhong(phong); // g√°n sinh vi√™n v√†o ph√≤ng
        sinhVienRepository.save(sv);

        // c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi hi·ªán t·∫°i v√† tr·∫°ng th√°i ph√≤ng
        int soNguoiMoi = phong.getSoNguoiHienTai() + 1;
        capNhatSoNguoiHienTai(soPhong, toa, soNguoiMoi);
        capNhatTrangThai(soPhong, toa, soNguoiMoi > 0);

        return true;
    }
}
