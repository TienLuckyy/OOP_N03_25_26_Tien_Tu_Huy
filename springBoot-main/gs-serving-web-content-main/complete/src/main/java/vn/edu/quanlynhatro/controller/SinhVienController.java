package vn.edu.quanlynhatro.controller;

import vn.edu.quanlynhatro.model.SinhVien;
import vn.edu.quanlynhatro.service.SinhVienService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/sinhvien")
public class SinhVienController {

    @Autowired
    private SinhVienService sinhVienService;

    // ------------------- DANH S√ÅCH SINH VI√äN (READ ALL) -------------------
    @GetMapping({"/list", "/"})
    public String hienThiTatCaSinhVien(Model model) {
        List<SinhVien> danhSach = sinhVienService.getAll();
        model.addAttribute("sinhviens", danhSach);
        model.addAttribute("title", "Danh S√°ch Sinh Vi√™n");
        return "sinhvien/list";
    }

    // ------------------- FORM TH√äM SINH VI√äN (CREATE UI) -------------------
    @GetMapping("/add")
    public String hienThiThemSVUI(Model model) {
        model.addAttribute("sinhvien", new SinhVien());
        model.addAttribute("title", "Th√™m Sinh Vi√™n");
        return "sinhvien/add";
    }

// ------------------- L∆ØU SINH VI√äN (CREATE/UPDATE LOGIC) -------------------
@PostMapping("/save")
public String xuLyLuuSinhVien(@ModelAttribute("sinhvien") SinhVien sinhVien,
                              RedirectAttributes ra) {

    // üî• QUAN TR·ªåNG: Gi·ªØ l·∫°i th√¥ng tin ph√≤ng khi update
    if (sinhVien.getId() != null) {
        // N·∫øu l√† update, l·∫•y th√¥ng tin ph√≤ng hi·ªán t·∫°i t·ª´ database
        Optional<SinhVien> existingSinhVien = sinhVienService.findById(sinhVien.getId());
        if (existingSinhVien.isPresent()) {
            SinhVien existing = existingSinhVien.get();
            // Gi·ªØ l·∫°i th√¥ng tin ph√≤ng n·∫øu kh√¥ng thay ƒë·ªïi
            if (sinhVien.getPhong() == null && existing.getPhong() != null) {
                sinhVien.setPhong(existing.getPhong());
            }
        }
    }

    // Ki·ªÉm tra MSSV tr√πng (ch·ªâ v·ªõi sinh vi√™n m·ªõi)
    if (sinhVien.getId() == null) {
        Optional<SinhVien> svMssv = sinhVienService.findByMssv(sinhVien.getMssv());
        if (svMssv.isPresent()) {
            ra.addFlashAttribute("error", "MSSV '" + sinhVien.getMssv() + "' ƒë√£ t·ªìn t·∫°i!");
            return "redirect:/sinhvien/add";
        }
    }

    // Ki·ªÉm tra CCCD tr√πng (ch·ªâ v·ªõi sinh vi√™n m·ªõi)
    if (sinhVien.getId() == null) {
        Optional<SinhVien> svCccd = sinhVienService.findByCccd(sinhVien.getCccd());
        if (svCccd.isPresent()) {
            ra.addFlashAttribute("error", "CCCD '" + sinhVien.getCccd() + "' ƒë√£ t·ªìn t·∫°i!");
            return "redirect:/sinhvien/add";
        }
    }

    // Ki·ªÉm tra SƒêT tr√πng (ch·ªâ v·ªõi sinh vi√™n m·ªõi)
    if (sinhVien.getId() == null && sinhVien.getSoDienThoai() != null && !sinhVien.getSoDienThoai().isEmpty()) {
        Optional<SinhVien> svSdt = sinhVienService.findBySoDienThoai(sinhVien.getSoDienThoai());
        if (svSdt.isPresent()) {
            ra.addFlashAttribute("error", "S·ªë ƒëi·ªán tho·∫°i '" + sinhVien.getSoDienThoai() + "' ƒë√£ t·ªìn t·∫°i!");
            return "redirect:/sinhvien/add";
        }
    }

    // L∆∞u sinh vi√™n
    sinhVienService.save(sinhVien);
    ra.addFlashAttribute("success", "L∆∞u sinh vi√™n th√†nh c√¥ng!");
    return "redirect:/sinhvien/list";
}

    // ------------------- FORM S·ª¨A SINH VI√äN (UPDATE UI - D√πng ID) -------------------
        @GetMapping("/edit/{id}")
        public String hienThiSuaSVUI(@PathVariable("id") Long id, Model model, RedirectAttributes ra) {
            Optional<SinhVien> svOptional = sinhVienService.findById(id);
            if (svOptional.isPresent()) {
                model.addAttribute("sinhvien", svOptional.get());
                model.addAttribute("title", "Ch·ªânh S·ª≠a Sinh Vi√™n");
                return "sinhvien/edit"; // ƒë√∫ng template
            }
            ra.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y sinh vi√™n c√≥ ID: " + id);
            return "redirect:/sinhvien/list";
        }

@GetMapping("/detail/{id}")
public String detailSinhVien(@PathVariable Long id, Model model) {
    SinhVien sv = sinhVienService.findById(id).orElse(null);
    if (sv == null) {
        model.addAttribute("error", "Sinh vi√™n kh√¥ng t·ªìn t·∫°i");
        return "redirect:/sinhvien/list";
    }
    model.addAttribute("sinhvien", sv);
    model.addAttribute("title", "Chi Ti·∫øt Sinh Vi√™n");
    return "sinhvien/detail";
}



    // ------------------- X√ìA SINH VI√äN (DELETE - D√πng ID) -------------------
@GetMapping("/delete/{id}")
public String xoaSinhVien(@PathVariable("id") Long id,
                          RedirectAttributes ra) {
    if (sinhVienService.findById(id).isPresent()) {
        sinhVienService.delete(id);
        ra.addFlashAttribute("success", "X√≥a sinh vi√™n th√†nh c√¥ng!");
    } else {
        ra.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y sinh vi√™n ƒë·ªÉ x√≥a.");
    }
    return "redirect:/sinhvien/list";
}


    // ------------------- T√åM KI·∫æM SINH VI√äN THEO MSSV -------------------
    @GetMapping("/search")
    public String timKiemSinhVienTheoMssv(@RequestParam(value = "mssv", required = false) String mssv,
                                          Model model) {
        if (mssv == null || mssv.trim().isEmpty()) {
            return "redirect:/sinhvien/list";
        }

    Optional<SinhVien> svOptional = sinhVienService.findByMssv(mssv);

        if (svOptional.isPresent()) {
            model.addAttribute("sinhviens", List.of(svOptional.get()));
            model.addAttribute("title", "K·∫øt qu·∫£ t√¨m ki·∫øm");
        } else {
            model.addAttribute("sinhviens", List.of());
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y sinh vi√™n c√≥ MSSV: " + mssv);
        }

        return "sinhvien/list";
    }
}
