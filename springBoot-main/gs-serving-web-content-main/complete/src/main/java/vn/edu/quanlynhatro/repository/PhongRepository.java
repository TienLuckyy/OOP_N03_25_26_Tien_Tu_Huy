package vn.edu.quanlynhatro.repository;

import vn.edu.quanlynhatro.model.Phong;
import vn.edu.quanlynhatro.model.PhongId;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface PhongRepository extends JpaRepository<Phong, PhongId> {

    // üîπ L·∫•y ph√≤ng theo tr·∫°ng th√°i (true = ƒëang s·ª≠ d·ª•ng, false = c√≤n tr·ªëng)
    List<Phong> findByTrangThai(boolean trangThai);

    // üîπ L·∫•y ph√≤ng theo t√≤a
    List<Phong> findByToa(String toa);

    // üîπ L·∫•y c√°c ph√≤ng c√≤n ch·ªó tr·ªëng (soNguoiHienTai < soNguoiToiDa)
    // S·ª¨A L·ªñI 1: Thay th·∫ø p.soNguoiHienTai b·∫±ng SIZE(p.sinhViens)
    @Query("SELECT p FROM Phong p WHERE SIZE(p.sinhViens) < p.soNguoiToiDa")
    List<Phong> findPhongConCho();

    // üîπ L·∫•y ph√≤ng theo s·ªë ng∆∞·ªùi hi·ªán t·∫°i
    // S·ª¨A L·ªñI 2: Ph∆∞∆°ng th·ª©c 'findBy' t·ª± ƒë·ªông s·∫Ω l·ªói v√¨ kh√¥ng c√≥ tr∆∞·ªùng soNguoiHienTai.
    // Ph·∫£i vi·∫øt l·∫°i b·∫±ng @Query v√† d√πng SIZE(p.sinhViens).
    @Query("SELECT p FROM Phong p WHERE SIZE(p.sinhViens) = :soNguoiHienTai")
    List<Phong> findBySoNguoiHienTai(@Param("soNguoiHienTai") int soNguoiHienTai);

    // üîπ L·∫•y ph√≤ng c√≥ ti·ªÅn nh√† l·ªõn h∆°n gi√° tr·ªã
    // List<Phong> findByTienNhaGreaterThan(double tienNha);

    // üîπ L·∫•y ph√≤ng theo t√≤a v√† tr·∫°ng th√°i
    List<Phong> findByToaAndTrangThai(String toa, boolean trangThai);

    // üîπ Ki·ªÉm tra t·ªìn t·∫°i ph√≤ng theo soPhong + toa
    boolean existsBySoPhongAndToa(String soPhong, String toa);

    // üîπ T√¨m ph√≤ng theo soPhong + toa
    Optional<Phong> findBySoPhongAndToa(String soPhong, String toa);

    // S·ª¨A L·ªñI 3: X√ìA PH∆Ø∆†NG TH·ª®C N√ÄY
    // Ch√∫ng ta kh√¥ng bao gi·ªù c·∫≠p nh·∫≠t "s·ªë ng∆∞·ªùi" th·ªß c√¥ng n·ªØa.
    // D·ªØ li·ªáu n√†y ƒë∆∞·ª£c t·ª± ƒë·ªông ƒë·∫øm.
    /*
    @Modifying
    @Query("UPDATE Phong p SET p.soNguoiHienTai = :soNguoiMoi WHERE p.soPhong = :soPhong AND p.toa = :toa")
    int capNhatSoNguoiHienTai(@Param("soPhong") String soPhong,
                              @Param("toa") String toa,
                              @Param("soNguoiMoi") int soNguoiMoi);
    */

    // üîπ C·∫≠p nh·∫≠t ti·ªÅn nh√†
    @Modifying
    @Query("UPDATE Phong p SET p.tienNha = :tienNha WHERE p.soPhong = :soPhong AND p.toa = :toa")
    int capNhatTienNha(@Param("soPhong") String soPhong,
                       @Param("toa") String toa,
                       @Param("tienNha") double tienNha);

    // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
    @Modifying
    @Query("UPDATE Phong p SET p.trangThai = :trangThai WHERE p.soPhong = :soPhong AND p.toa = :toa")
    int capNhatTrangThai(@Param("soPhong") String soPhong,
                         @Param("toa") String toa,
                         @Param("trangThai") boolean trangThai);

    // üîπ Th·ªëng k√™ ph√≤ng theo tr·∫°ng th√°i
    long countByTrangThai(boolean trangThai);

    // üîπ Th·ªëng k√™ ph√≤ng theo t√≤a
    long countByToa(String toa);
}