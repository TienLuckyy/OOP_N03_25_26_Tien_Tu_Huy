package vn.edu.quanlynhatro.service;

import vn.edu.quanlynhatro.model.BanQuanLy;
import vn.edu.quanlynhatro.model.Phong;
import vn.edu.quanlynhatro.model.SinhVien;
import vn.edu.quanlynhatro.repository.BanQuanLyRepository;
import vn.edu.quanlynhatro.repository.PhongRepository;
import vn.edu.quanlynhatro.repository.SinhVienRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
@Transactional
public class BanQuanLyService {
    
    @Autowired
    private BanQuanLyRepository banQuanLyRepository;
    
    @Autowired
    private PhongRepository phongRepository;
    
    @Autowired
    private SinhVienRepository sinhVienRepository;
    
    // ‚úÖ CREATE - Th√™m ban qu·∫£n l√Ω m·ªõi
    public BanQuanLy createBanQuanLy(BanQuanLy banQuanLy) {
        // Ki·ªÉm tra m√£ nh√¢n vi√™n tr√πng
        if (banQuanLyRepository.findByMaNhanVien(banQuanLy.getMaNhanVien()).isPresent()) {
            throw new RuntimeException("M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i: " + banQuanLy.getMaNhanVien());
        }

        // Ki·ªÉm tra CCCD tr√πng
        if (banQuanLyRepository.findByCccd(banQuanLy.getCccd()).isPresent()) {
            throw new RuntimeException("CCCD ƒë√£ t·ªìn t·∫°i: " + banQuanLy.getCccd());
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i tr√πng
        if (banQuanLyRepository.findBySoDienThoai(banQuanLy.getSoDienThoai()).isPresent()) {
            throw new RuntimeException("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i: " + banQuanLy.getSoDienThoai());
        }

        return banQuanLyRepository.save(banQuanLy);
    }
    
    // ‚úÖ READ - L·∫•y t·∫•t c·∫£ ban qu·∫£n l√Ω
    public List<BanQuanLy> getAllBanQuanLy() {
        return banQuanLyRepository.findAll();
    }
    
    // ‚úÖ READ - T√¨m theo ID
    public Optional<BanQuanLy> getBanQuanLyById(Long id) {
        return banQuanLyRepository.findById(id);
    }
    
    // ‚úÖ READ - T√¨m theo m√£ nh√¢n vi√™n
    public Optional<BanQuanLy> getBanQuanLyByMaNhanVien(String maNhanVien) {
        return banQuanLyRepository.findByMaNhanVien(maNhanVien);
    }
    
    // ‚úÖ UPDATE - C·∫≠p nh·∫≠t ban qu·∫£n l√Ω
    // ‚úÖ UPDATE - C·∫≠p nh·∫≠t ban qu·∫£n l√Ω
public BanQuanLy updateBanQuanLy(Long id, BanQuanLy banQuanLyUpdate) {
    BanQuanLy existing = banQuanLyRepository.findById(id)
        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ban qu·∫£n l√Ω v·ªõi ID: " + id));

    // Ki·ªÉm tra m√£ nh√¢n vi√™n tr√πng (tr·ª´ b·∫£n ghi hi·ªán t·∫°i)
    if (banQuanLyRepository.existsByMaNhanVienAndIdNot(banQuanLyUpdate.getMaNhanVien(), id)) {
        throw new RuntimeException("M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i: " + banQuanLyUpdate.getMaNhanVien());
    }

    // Ki·ªÉm tra CCCD tr√πng (tr·ª´ b·∫£n ghi hi·ªán t·∫°i)
    if (banQuanLyRepository.existsByCccdAndIdNot(banQuanLyUpdate.getCccd(), id)) {
        throw new RuntimeException("CCCD ƒë√£ t·ªìn t·∫°i: " + banQuanLyUpdate.getCccd());
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i tr√πng (tr·ª´ b·∫£n ghi hi·ªán t·∫°i)
    if (banQuanLyRepository.existsBySoDienThoaiAndIdNot(banQuanLyUpdate.getSoDienThoai(), id)) {
        throw new RuntimeException("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i: " + banQuanLyUpdate.getSoDienThoai());
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    existing.setHoTen(banQuanLyUpdate.getHoTen());
    existing.setGioiTinh(banQuanLyUpdate.getGioiTinh());
    existing.setCccd(banQuanLyUpdate.getCccd());
    existing.setSoDienThoai(banQuanLyUpdate.getSoDienThoai());
    existing.setNgaySinh(banQuanLyUpdate.getNgaySinh());
    existing.setDiaChi(banQuanLyUpdate.getDiaChi());
    existing.setToaPhuTrach(banQuanLyUpdate.getToaPhuTrach());
    existing.setMaNhanVien(banQuanLyUpdate.getMaNhanVien());

    return banQuanLyRepository.save(existing);
}

    
    // ‚úÖ DELETE - X√≥a ban qu·∫£n l√Ω
// ‚úÖ DELETE - X√≥a ban qu·∫£n l√Ω (gi·ªØ l·∫°i bi·∫øn cho th√¥ng b√°o)
public void deleteBanQuanLy(Long id) {
    BanQuanLy nhanVien = banQuanLyRepository.findById(id)
        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ban qu·∫£n l√Ω v·ªõi ID: " + id));
    
    // Ki·ªÉm tra xem nh√¢n vi√™n c√≥ ƒëang qu·∫£n l√Ω ph√≤ng c√≥ sinh vi√™n kh√¥ng
    List<Phong> phongQuanLy = getPhongQuanLyByNhanVien(id);
    boolean coSinhVien = phongQuanLy.stream()
        .anyMatch(phong -> !phong.getSinhViens().isEmpty());
        
    if (coSinhVien) {
        long tongSinhVien = phongQuanLy.stream()
            .mapToInt(phong -> phong.getSinhViens().size())
            .sum();
        // ‚úÖ S·ª¨ D·ª§NG bi·∫øn nhanVien trong th√¥ng b√°o l·ªói
        throw new RuntimeException("Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n " + nhanVien.getHoTen() + 
            " ƒëang qu·∫£n l√Ω " + tongSinhVien + " sinh vi√™n. H√£y chuy·ªÉn sinh vi√™n ra kh·ªèi ph√≤ng tr∆∞·ªõc.");
    }
    
    banQuanLyRepository.deleteById(id);
}
    
    // üéØ L·∫•y danh s√°ch ph√≤ng m√† nh√¢n vi√™n qu·∫£n l√Ω (THEO TOA)
    public List<Phong> getPhongQuanLyByNhanVien(Long nhanVienId) {
        BanQuanLy nhanVien = banQuanLyRepository.findById(nhanVienId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n"));
        
        if ("T·∫•t c·∫£".equals(nhanVien.getToaPhuTrach())) {
            return phongRepository.findAll();
        }
        return phongRepository.findByToa(nhanVien.getToaPhuTrach());
    }
    
    // üéØ L·∫•y danh s√°ch sinh vi√™n m√† nh√¢n vi√™n qu·∫£n l√Ω
    public List<SinhVien> getSinhVienQuanLyByNhanVien(Long nhanVienId) {
        return getPhongQuanLyByNhanVien(nhanVienId).stream()
            .flatMap(phong -> phong.getSinhViens().stream())
            .toList();
    }
    
    // üéØ Th·ªëng k√™ cho nh√¢n vi√™n - S·ª¨A L·∫†I CHO PH√ô H·ª¢P
    public Map<String, Object> getThongKeNhanVien(Long nhanVienId) {
        List<Phong> phongQuanLy = getPhongQuanLyByNhanVien(nhanVienId);
        List<SinhVien> sinhVienQuanLy = getSinhVienQuanLyByNhanVien(nhanVienId);
        
        Map<String, Object> thongKe = new HashMap<>();
        thongKe.put("tongPhong", phongQuanLy.size());
        thongKe.put("tongSinhVien", sinhVienQuanLy.size());
        
        // ‚úÖ S·ª¨A: Ki·ªÉm tra ph√≤ng tr·ªëng b·∫±ng logic thay v√¨ method
        long phongTrong = phongQuanLy.stream()
            .filter(phong -> phong.getSoNguoiHienTai() < phong.getSoNguoiToiDa())
            .count();
        long phongDay = phongQuanLy.stream()
            .filter(phong -> phong.getSoNguoiHienTai() >= phong.getSoNguoiToiDa())
            .count();
            
        thongKe.put("phongTrong", phongTrong);
        thongKe.put("phongDay", phongDay);
        
        // T√≠nh t·ª∑ l·ªá s·ª≠ d·ª•ng
        int tongSoNguoiToiDa = phongQuanLy.stream().mapToInt(Phong::getSoNguoiToiDa).sum();
        double tyLeSuDung = tongSoNguoiToiDa > 0 ? 
            (double) sinhVienQuanLy.size() / tongSoNguoiToiDa * 100 : 0;
        thongKe.put("dienTichSuDung", String.format("%.1f%%", tyLeSuDung));
        
        return thongKe;
    }
    
    // üéØ T√¨m ki·∫øm ban qu·∫£n l√Ω
    public List<BanQuanLy> searchBanQuanLy(String keyword) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return getAllBanQuanLy();
        }
        return banQuanLyRepository.findByHoTenContainingIgnoreCase(keyword);
    }
    
    // üéØ L·∫•y nh√¢n vi√™n theo t√≤a
    public List<BanQuanLy> getNhanVienTheoToa(String toa) {
        return banQuanLyRepository.findByToaPhuTrachOrAll(toa);
    }
    
    // üéØ Th·ªëng k√™ t·ªïng quan to√†n h·ªá th·ªëng - S·ª¨A L·∫†I
    public Map<String, Object> getThongKeTongQuan() {
        Map<String, Object> thongKe = new HashMap<>();
        
        // Th·ªëng k√™ nh√¢n vi√™n
        thongKe.put("tongNhanVien", banQuanLyRepository.count());
        thongKe.put("phanBoNhanVien", banQuanLyRepository.countByToaPhuTrach());
        
        // Th·ªëng k√™ ph√≤ng
        thongKe.put("tongPhong", phongRepository.count());
        
        // Th·ªëng k√™ sinh vi√™n
        thongKe.put("tongSinhVien", sinhVienRepository.count());
        
        return thongKe;
    }
    
    // üéØ Ki·ªÉm tra nh√¢n vi√™n c√≥ th·ªÉ qu·∫£n l√Ω ph√≤ng
    public boolean kiemTraQuyenQuanLy(Long nhanVienId, String soPhong, String toa) {
        BanQuanLy nhanVien = banQuanLyRepository.findById(nhanVienId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n"));
        
        Phong phong = phongRepository.findBySoPhongAndToa(soPhong, toa)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√≤ng"));
        
        return nhanVien.coTheQuanLyPhong(phong);
    }
    
    // üéØ L·∫•y th·ªëng k√™ ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã
    public String getThongKeTongQuanText() {
        long tongNhanVien = banQuanLyRepository.count();
        long tongPhong = phongRepository.count();
        long tongSinhVien = sinhVienRepository.count();
        
        return String.format("T·ªïng s·ªë: %d nh√¢n vi√™n | %d ph√≤ng | %d sinh vi√™n", 
            tongNhanVien, tongPhong, tongSinhVien);
    }
    
    // üéØ Ki·ªÉm tra ph√≤ng c√≤n tr·ªëng (ph∆∞∆°ng th·ª©c ti·ªán √≠ch)
    public boolean isPhongConTrong(Phong phong) {
        return phong.getSoNguoiHienTai() < phong.getSoNguoiToiDa();
    }
    
    // üéØ L·∫•y s·ªë ch·ªó tr·ªëng c·ªßa ph√≤ng
    public int getSoChoTrong(Phong phong) {
        return phong.getSoNguoiToiDa() - phong.getSoNguoiHienTai();
    }
    // üéØ ƒê·∫øm t·ªïng s·ªë ph√≤ng
    public long countAllPhong() {
    return phongRepository.count(); // ƒë·∫£m b·∫£o repo d√πng ƒë√∫ng entity Phong
}
}